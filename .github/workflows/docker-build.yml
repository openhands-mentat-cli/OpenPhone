name: 🐳 Build Docker Image

on:
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker registry'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/openphone

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔐 Log in to Container Registry
      if: github.event_name != 'pull_request' || github.event.inputs.push_to_registry == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' || github.event.inputs.push_to_registry == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: 🧪 Test Docker image
      run: |
        echo "🧪 Testing Docker image..."
        
        # Build image for testing
        docker build -t openphone-test .
        
        # Test that the image can start
        docker run --rm -d --name openphone-test-container openphone-test &
        CONTAINER_PID=$!
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        if docker ps | grep -q openphone-test-container; then
          echo "✅ Container started successfully"
          
          # Test API endpoints
          CONTAINER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' openphone-test-container)
          echo "🔍 Container IP: $CONTAINER_IP"
          
          # Wait for server to be ready
          for i in {1..30}; do
            if docker exec openphone-test-container curl -s http://localhost:12000/api/status > /dev/null; then
              echo "✅ API is responding"
              break
            fi
            echo "⏳ Waiting for API to be ready... ($i/30)"
            sleep 2
          done
          
          # Test API endpoints
          echo "🧪 Testing API endpoints..."
          docker exec openphone-test-container curl -s http://localhost:12000/api/phones || echo "❌ /api/phones failed"
          docker exec openphone-test-container curl -s http://localhost:12000/api/status || echo "❌ /api/status failed"
          
        else
          echo "❌ Container failed to start"
          docker logs openphone-test-container
          exit 1
        fi
        
        # Cleanup
        docker stop openphone-test-container || true
        docker rm openphone-test-container || true

    - name: 📋 Output image details
      run: |
        echo "## 🐳 Docker Image Built Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Usage:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull and run the image" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 12000:12000 -p 5900:5900 -p 6080:6080 --privileged ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Or use docker-compose" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose up" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Access Points:**" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 Web Interface: http://localhost:12000" >> $GITHUB_STEP_SUMMARY
        echo "- 📺 VNC Viewer: http://localhost:12000/vnc" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 API Status: http://localhost:12000/api/status" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'openphone-test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
